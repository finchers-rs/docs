initSidebarItems({"fn":[["after_apply","Creates a wrapper for creating an endpoint which runs the provided function after calling `Endpoint::apply()`."],["and_then","Create a wrapper for creating an endpoint which executes another future created by the specified function after the precedent future resolves."],["before_apply","Creates a wrapper for creating an endpoint which runs the provided function before calling `Endpoint::apply()`."],["map","Create a wrapper for creating an endpoint which maps the output to another type using the specified function."],["or_reject","Creates a `Wrapper` for creating an endpoint which returns the error value returned from `Endpoint::apply()` as the return value from the associated `Future`."],["or_reject_with","Creates a `Wrapper` for creating an endpoint which converts the error value returned from `Endpoint::apply()` to the specified type and returns it as the return value from the associated `Future`."],["recover",""],["then","Create a wrapper for creating an endpoint which executes another future created by the specified function after the precedent future resolves."],["with_spawner","Create a `Wrapper` to construct endpoints whose `Future` uses the specified spawner."]],"struct":[["AfterApply",""],["AndThen",""],["BeforeApply",""],["Map",""],["OrReject",""],["OrRejectWith",""],["Recover",""],["Then",""],["WithSpawner",""]],"trait":[["EndpointWrapExt","A set of extension methods for using built-in `Wrapper`s."],["Wrapper","A trait representing the conversion of an endpoint to another endpoint."]]});